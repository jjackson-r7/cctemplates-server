#Version 1.0
from flask import Flask, request, render_template, redirect, url_for
import os
from process import process_general_section, asset_discovery, service_discovery, discovery_performance, vulnerability_checks, scan_assistant, file_search, spam_relay, database, mail_servers, cvs_servers, dhcp_servers, telnet_servers, policy_manager, oracle_policy, lotus, windows_group, cif_smb_account, as_400_policy, unix_policy

app = Flask(__name__, static_url_path='/var/www/cctemplates/static')
app.config['UPLOAD_FOLDER'] = 'uploads'

def process_file(file_path):
    # Your processing logic here
    return processed_result

def format_output(upload_result):
    # Define the maximum line length
    max_line_length = 80
    
    # Split the upload result into chunks of max_line_length characters
    formatted_result = '\n'.join(upload_result[i:i+max_line_length] for i in range(0, len(upload_result), max_line_length))
    
    return formatted_result

def create_upload_directory():
    # Create the uploads directory if it doesn't exist
    upload_dir = app.config['UPLOAD_FOLDER']
    if not os.path.exists(upload_dir):
        os.makedirs(upload_dir)

create_upload_directory()

@app.route('/scantemplate/upload', methods=["GET", "POST"])
def upload():
    if request.method == "POST":
        uploaded_file = request.files.get('file')  # Use request.files.get() to handle None if no file is uploaded
        if uploaded_file:
            try:
                # Save the uploaded file to disk
                file_path = os.path.join(app.config['UPLOAD_FOLDER'], uploaded_file.filename)
                uploaded_file.save(file_path)
                
                # Process the general section
                general_output = process_general_section(file_path)
                
                # Call asset_discovery function with the uploaded file
                asset_output = asset_discovery(file_path)

                # Call service_discovery function with the uploaded file
                service_output = service_discovery(file_path)

                # Call discovery_performance function with the uploaded file
                discovery_output = discovery_performance(file_path)

                # Call vulnerability_checks function with the uploaded file
                vulnerability_output = vulnerability_checks(file_path)

                # Call scan_assistant function with the root element
                scan_assistant_output = scan_assistant(file_path)

                # Call file_search function with the root element
                file_search_output = file_search(file_path)

                # Call spam_relay function with the root element
                spam_relay_output = spam_relay(file_path)

                #Call database
                database_output = database(file_path)

                #Call mail_servers
                mail_output = mail_servers(file_path)

                #Call CVS Servers
                cvs_output = cvs_servers(file_path)

                #Call DHCP Servers
                dhcp_output = dhcp_servers(file_path)

                #call telnet servers
                telnet_output = telnet_servers(file_path)

                #Call policy manager
                policy_output = policy_manager(file_path)

                #Oracle Policy
                oracle_output = oracle_policy(file_path)

                #lotus
                lotus_output = lotus(file_path)

                #windows_group
                windowsg_output = windows_group(file_path)

                #cif_smb

                cif_smb_output = cif_smb_account(file_path)

                #as_400
                as_400_output = as_400_policy(file_path)

                #unix
                unix_output = unix_policy(file_path)
                
                # Combine results
                combined_result = (
                    general_output + '\n\n' + asset_output + '\n\n' + service_output + '\n\n' + 
                    discovery_output + '\n\n' + vulnerability_output + '\n\n' + 
                    scan_assistant_output + '\n\n' + file_search_output + '\n\n' + 
                    spam_relay_output + '\n\n' + database_output + '\n\n' + 
                    mail_output + '\n\n' + cvs_output + '\n\n' + dhcp_output + '\n\n' + 
                    telnet_output + '\n\n' + policy_output + '\n\n' + oracle_output + '\n\n' + 
                    lotus_output + '\n\n' + windowsg_output + '\n\n' + cif_smb_output + '\n\n' + 
                    as_400_output + '\n\n' + unix_output
                )  

                #Remove files when done. 
                os.remove(file_path)

                return render_template("output.html", upload_result=combined_result)
            except Exception as e:
                return f"Error processing the uploaded file: {str(e)}"
        else:
            return redirect(url_for('index'))  # Redirect to index page if no file is uploaded
    return render_template("index.html")

@app.route('/scantemplate')
def index():
    return render_template("index.html")

if __name__ == "__main__":
    app.run(debug=True)
